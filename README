第一个难点是primes
首先，何时创建子进程是很值得考虑的；
其次，需要谨慎地创建进程和管道，否则会提前用尽资源，因为今年的实验要求算到280，而之前的实验仅需到35。
失败的尝试（放在去年是通过的）：
```c
int main(int argc, char *argv[])
{
  int p[2];
  pipe(p);
  for (int i = 2; i <= 100; i++) {
    write(p[1], &i, sizeof(i));
  }
  close(p[1]);
  int curr, num;
  while (read(p[0], &curr, sizeof(curr)) > 0) {
    printf("prime %d\n", curr);
    int newp[2];
    pipe(newp);
    int rc = fork();
    if (rc == 0) { // child
      close(p[0]);
      close(newp[1]);
      p[0] = newp[0];
      p[1] = newp[1];
    } else { // parent
      close(newp[0]);
      while (read(p[0], &num, sizeof(num)) > 0) {
        if (num % curr != 0) {
          write(newp[1], &num, sizeof(num));
        }
      }
      close(p[0]);
      close(newp[1]);
      wait(0);
    }
  }
}
```

首先改成递归，仍然fail。
并且这里的fail表现是在STOPAT超过130时，不会输出任何字符，而小于125则正常输出结果。
```c
int main(int argc, char *argv[])
{
  int p[2];
  pipe(p);
  for (int i = 2; i <= STOPAT; i++) {
    write(p[1], &i, sizeof(i));
  }
  close(p[1]);
  handle(p);
  return 0;
}
```
分析一下，每遇到一个质数必须要创建一个pipe（并产生新的FD），同时fork出子进程，似乎都无法省去。
唯一可以优化的点是，目前不管下面有没有质数，都会先创建pipe及fork，于是通过增加一个flag，改成当找到不能整除的数再fork。
但居然没有任何进步（仍然失败在130）。

参考了网友解答，发现必须在main中就fork，父进程做写入操作，子进程直接调处理函数。
比较一下，两者的区别应该在于子进程的方式少了向管道写入的操作。
但原方法的`main`在调用handle()前已经关闭管道写端了，不懂为啥还有影响。

另外，开头的非递归代码按上面改成一开始就fork，也可以通过。
